------------------------------------------------------------
cfg.__dict__
{'base_lr': 0.0002,
 'ckpt_file': 'exp/train/market1501/not_nf_not_ohs_gm_0.3_lm_0.3_glw_1_llw_0_idlw_0_lr_0.0002_exp_decay_at_151_total_300/run1/ckpt.pth',
 'crop_prob': 0,
 'crop_ratio': 1,
 'dataset': 'market1501',
 'exp_decay_at_epoch': 151,
 'exp_dir': 'exp/train/market1501/not_nf_not_ohs_gm_0.3_lm_0.3_glw_1_llw_0_idlw_0_lr_0.0002_exp_decay_at_151_total_300/run1',
 'g_loss_weight': 1.0,
 'global_margin': 0.3,
 'id_loss_weight': 0.0,
 'ids_per_batch': 32,
 'im_mean': [0.486, 0.459, 0.408],
 'im_std': [0.229, 0.224, 0.225],
 'ims_per_id': 4,
 'l_loss_weight': 0.0,
 'local_conv_out_channels': 128,
 'local_dist_own_hard_sample': False,
 'local_margin': 0.3,
 'log_steps': 10000000000.0,
 'log_to_file': True,
 'lr_decay_type': 'exp',
 'model_weight_file': '',
 'normalize_feature': False,
 'only_test': False,
 'prefetch_threads': 2,
 'resize_h_w': (256, 128),
 'resume': False,
 'run': 1,
 'scale_im': True,
 'seed': None,
 'staircase_decay_at_epochs': (101, 201),
 'staircase_decay_multiply_factor': 0.1,
 'stderr_file': 'exp/train/market1501/not_nf_not_ohs_gm_0.3_lm_0.3_glw_1_llw_0_idlw_0_lr_0.0002_exp_decay_at_151_total_300/run1/stderr_2018-12-07_06:25:35.txt',
 'stdout_file': 'exp/train/market1501/not_nf_not_ohs_gm_0.3_lm_0.3_glw_1_llw_0_idlw_0_lr_0.0002_exp_decay_at_151_total_300/run1/stdout_2018-12-07_06:25:35.txt',
 'sys_device_ids': (0,),
 'test_batch_size': 32,
 'test_final_batch': True,
 'test_mirror_type': None,
 'test_set_kwargs': {'batch_dims': 'NCHW',
                     'batch_size': 32,
                     'final_batch': True,
                     'im_mean': [0.486, 0.459, 0.408],
                     'im_std': [0.229, 0.224, 0.225],
                     'mirror_type': None,
                     'name': 'market1501',
                     'num_prefetch_threads': 2,
                     'part': 'test',
                     'prng': <module 'numpy.random' from '/usr/local/lib/python2.7/dist-packages/numpy/random/__init__.pyc'>,
                     'resize_h_w': (256, 128),
                     'scale': True,
                     'shuffle': False},
 'test_shuffle': False,
 'total_epochs': 300,
 'train_final_batch': False,
 'train_mirror_type': 'random',
 'train_set_kwargs': {'batch_dims': 'NCHW',
                      'crop_prob': 0,
                      'crop_ratio': 1,
                      'final_batch': False,
                      'ids_per_batch': 32,
                      'im_mean': [0.486, 0.459, 0.408],
                      'im_std': [0.229, 0.224, 0.225],
                      'ims_per_id': 4,
                      'mirror_type': 'random',
                      'name': 'market1501',
                      'num_prefetch_threads': 2,
                      'part': 'trainval',
                      'prng': <module 'numpy.random' from '/usr/local/lib/python2.7/dist-packages/numpy/random/__init__.pyc'>,
                      'resize_h_w': (256, 128),
                      'scale': True,
                      'shuffle': True},
 'train_shuffle': True,
 'trainset_part': 'trainval',
 'weight_decay': 0.0005}
------------------------------------------------------------
----------------------------------------
market1501 trainval set
----------------------------------------
NO. Images: 12936
NO. IDs: 751
----------------------------------------
----------------------------------------
market1501 test set
----------------------------------------
NO. Images: 31969
NO. IDs: 751
NO. Query Images: 3368
NO. Gallery Images: 15913
NO. Multi-query Images: 12688
----------------------------------------
> /home/ubuntu/CS230-Project/AlignedReID-Re-Production-Pytorch/aligned_reid/dataset/Prefetcher.py(108)enqueue()
-> element = self.get_element(ptr - 1)
(Pdb) > /home/ubuntu/CS230-Project/AlignedReID-Re-Production-Pytorch/aligned_reid/dataset/Prefetcher.py(108)enqueue()
-> element = self.get_element(ptr - 1)
(Pdb) 103  	      # Increment the counter to claim that this element has been enqueued by
104  	      # this thread.
105  	      incremented, ptr = self.ptr.increment()
106  	      if incremented:
107  	        pdb.set_trace()
108  ->	        element = self.get_element(ptr - 1)
109  	        # When enqueuing, keep an eye on the stop and reset signal.
110  	        while not self.stop_event.isSet() and not self.reset_event.isSet():
111  	          try:
112  	            # This operation will wait at most `timeout` for a free slot in
113  	            # the queue to be available.
(Pdb) > /home/ubuntu/CS230-Project/AlignedReID-Re-Production-Pytorch/aligned_reid/dataset/Prefetcher.py(110)enqueue()
-> while not self.stop_event.isSet() and not self.reset_event.isSet():
(Pdb) 114  	            self.queue.put(element, timeout=0.5)
115  	            break
116  	          except:
117  	            pass
118  	      else:
119  	        self.end_ep()
120  	    print('Exiting thread {}!!!!!!!!'.format(threading.current_thread().name))
121  	
122  	
123  	class Prefetcher(object):
124  	  """This helper class enables sample enqueuing and batch dequeuing, to speed
(Pdb) ((array([[[-1.45440534, -1.33453207, -1.07766076, ..., -0.78653994,
         -0.15292405,  0.15532152],
        [-1.18040928, -1.060536  , -0.8379142 , ..., -0.71804093,
         -0.08442504,  0.22382053],
        [-0.63241716, -0.54679339, -0.3584211 , ..., -0.59816765,
          0.03544824,  0.36081856],
        ...,
        [ 0.42931758,  0.42931758,  0.42931758, ...,  0.36081856,
          0.37794332,  0.39506807],
        [ 0.54919086,  0.54919086,  0.54919086, ...,  0.46356709,
          0.49781659,  0.51494135],
        [ 0.60056512,  0.60056512,  0.61768987, ...,  0.49781659,
          0.54919086,  0.58344036]],

       [[-1.05120798, -0.92865896, -0.66605392, ..., -0.84112395,
         -0.19336485,  0.1217612 ],
        [-0.77109594, -0.64854692, -0.42095588, ..., -0.78860294,
         -0.14084384,  0.19178922],
        [-0.21087185, -0.12333683,  0.0692402 , ..., -0.66605392,
         -0.01829482,  0.31433824],
        ...,
        [ 0.50691527,  0.50691527,  0.50691527, ...,  0.29683123,
          0.31433824,  0.33184524],
        [ 0.62946429,  0.62946429,  0.62946429, ...,  0.40187325,
          0.43688725,  0.45439426],
        [ 0.68198529,  0.68198529,  0.6994923 , ...,  0.43688725,
          0.48940826,  0.52442227]],

       [[-1.55189542, -1.41246187, -1.13359477, ..., -0.87215686,
         -0.22727669,  0.0864488 ],
        [-1.27302832, -1.15102397, -0.90701525, ..., -0.80244009,
         -0.15755991,  0.17359477],
        [-0.71529412, -0.62814815, -0.43642702, ..., -0.68043573,
         -0.01812636,  0.33045752],
        ...,
        [ 0.64418301,  0.64418301,  0.64418301, ...,  0.62675381,
          0.64418301,  0.6616122 ],
        [ 0.76618736,  0.76618736,  0.76618736, ...,  0.73132898,
          0.76618736,  0.78361656],
        [ 0.81847495,  0.81847495,  0.83590414, ...,  0.76618736,
          0.81847495,  0.85333333]]]), array([[[ 0.58344036,  0.61768987,  0.70331364, ..., -0.27279733,
         -0.25567257, -0.23854782],
        [ 0.56631561,  0.54919086,  0.54919086, ..., -0.30704684,
         -0.28992208, -0.27279733],
        [ 0.51494135,  0.42931758,  0.27519479, ..., -0.39267061,
         -0.3584211 , -0.3584211 ],
        ...,
        [ 0.37794332,  0.36081856,  0.36081856, ...,  0.44644233,
          0.42931758,  0.42931758],
        [ 0.25807004,  0.25807004,  0.24094529, ...,  0.46356709,
          0.48069184,  0.48069184],
        [ 0.20669578,  0.20669578,  0.18957102, ...,  0.48069184,
          0.49781659,  0.49781659]],

       [[ 0.29683123,  0.33184524,  0.41938025, ..., -0.42095588,
         -0.40344888, -0.38594188],
        [ 0.27932423,  0.27932423,  0.27932423, ..., -0.45596989,
         -0.43846289, -0.42095588],
        [ 0.26181723,  0.17428221,  0.01671919, ..., -0.5435049 ,
         -0.5084909 , -0.5084909 ],
        ...,
        [ 0.48940826,  0.47190126,  0.47190126, ...,  0.55943627,
          0.54192927,  0.54192927],
        [ 0.36685924,  0.36685924,  0.34935224, ...,  0.57694328,
          0.59445028,  0.59445028],
        [ 0.31433824,  0.31433824,  0.29683123, ...,  0.59445028,
          0.61195728,  0.61195728]],

       [[ 0.52217865,  0.55703704,  0.64418301, ..., -0.31442266,
         -0.29699346, -0.27956427],
        [ 0.50474946,  0.48732026,  0.50474946, ..., -0.34928105,
         -0.33185185, -0.31442266],
        [ 0.45246187,  0.3653159 ,  0.22588235, ..., -0.43642702,
         -0.40156863, -0.40156863],
        ...,
        [ 0.67904139,  0.6616122 ,  0.6616122 , ...,  0.74875817,
          0.73132898,  0.73132898],
        [ 0.55703704,  0.55703704,  0.53960784, ...,  0.76618736,
          0.78361656,  0.78361656],
        [ 0.50474946,  0.50474946,  0.48732026, ...,  0.78361656,
          0.80104575,  0.80104575]]]), array([[[ 3.77943317e-01,  3.60818563e-01,  3.43693809e-01, ...,
          1.83234866e-02, -6.73002826e-02, -1.01549790e-01],
        [ 3.43693809e-01,  3.26569056e-01,  3.26569056e-01, ...,
         -1.59260211e-02, -6.73002826e-02, -8.44250364e-02],
        [ 2.58070040e-01,  2.58070040e-01,  2.58070040e-01, ...,
         -6.73002826e-02, -5.01755287e-02, -3.30507749e-02],
        ...,
        [ 3.77943317e-01,  3.60818563e-01,  3.43693809e-01, ...,
         -6.49541913e-01, -6.66666667e-01, -6.83791420e-01],
        [ 3.60818563e-01,  3.43693809e-01,  3.26569056e-01, ...,
         -1.35799298e-01, -1.35799298e-01, -1.52924052e-01],
        [ 3.60818563e-01,  3.43693809e-01,  3.26569056e-01, ...,
          1.21072010e-01,  1.21072010e-01,  1.21072010e-01]],

       [[ 7.69520308e-01,  7.52013305e-01,  7.34506303e-01, ...,
          4.36887255e-01,  3.49352241e-01,  3.14338235e-01],
        [ 7.34506303e-01,  7.16999300e-01,  7.16999300e-01, ...,
          4.01873249e-01,  3.49352241e-01,  3.31845238e-01],
        [ 6.46971289e-01,  6.46971289e-01,  6.46971289e-01, ...,
          3.49352241e-01,  3.66859244e-01,  3.84366246e-01],
        ...,
        [ 4.36887255e-01,  4.19380252e-01,  4.01873249e-01, ...,
         -8.23616947e-01, -8.58630952e-01, -8.76137955e-01],
        [ 4.19380252e-01,  4.01873249e-01,  3.84366246e-01, ...,
         -3.15913866e-01, -3.15913866e-01, -3.33420868e-01],
        [ 4.19380252e-01,  4.01873249e-01,  3.84366246e-01, ...,
         -5.33088235e-02, -5.33088235e-02, -5.33088235e-02]],

       [[ 3.13028322e-01,  2.95599129e-01,  2.78169935e-01, ...,
         -2.79564270e-01, -3.66710240e-01, -4.01568627e-01],
        [ 2.78169935e-01,  2.60740741e-01,  2.60740741e-01, ...,
         -2.96993464e-01, -3.49281046e-01, -3.66710240e-01],
        [ 1.91023965e-01,  1.91023965e-01,  1.91023965e-01, ...,
         -3.49281046e-01, -3.14422658e-01, -3.14422658e-01],
        ...,
        [ 6.09324619e-01,  5.91895425e-01,  5.74466231e-01, ...,
         -5.23572985e-01, -5.41002179e-01, -5.41002179e-01],
        [ 5.91895425e-01,  5.74466231e-01,  5.57037037e-01, ...,
          1.67320261e-02, -6.97167756e-04, -6.97167756e-04],
        [ 5.91895425e-01,  5.74466231e-01,  5.57037037e-01, ...,
          2.78169935e-01,  2.78169935e-01,  2.78169935e-01]]]), array([[[-0.34129634, -0.42692011, -0.61529241, ...,  0.01832349,
          0.03544824,  0.03544824],
        [-0.3584211 , -0.42692011, -0.56391814, ...,  0.01832349,
          0.01832349,  0.03544824],
        [-0.40979536, -0.42692011, -0.46116962, ...,  0.00119873,
          0.01832349,  0.01832349],
        ...,
        [ 0.24094529,  0.22382053,  0.20669578, ..., -0.68379142,
         -0.63241716, -0.61529241],
        [ 0.18957102,  0.17244627,  0.12107201, ..., -0.61529241,
         -0.51254388, -0.46116962],
        [ 0.15532152,  0.13819676,  0.0868225 , ..., -0.5810429 ,
         -0.46116962, -0.39267061]],

       [[-0.07081583, -0.15835084, -0.35092787, ...,  0.22680322,
          0.24431022,  0.24431022],
        [-0.10582983, -0.17585784, -0.29840686, ...,  0.20929622,
          0.22680322,  0.24431022],
        [-0.17585784, -0.19336485, -0.21087185, ...,  0.19178922,
          0.20929622,  0.22680322],
        ...,
        [ 0.19178922,  0.17428221,  0.15677521, ..., -0.85863095,
         -0.84112395, -0.82361695],
        [ 0.13926821,  0.1217612 ,  0.0692